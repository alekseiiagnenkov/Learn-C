/*Из входного потока вводится непрямоугольная матрицы целых чисел
Значения n и m заранее не известны и вводятся из входного потока.

Сформировать новую матрицу,поместив в i-ую ее строку только те числа из i-ой строки исходной матрицы,
в записи которых использованы только четные цифры.

В дополнительных функциях доступ к элементам массивов реальзовать с помощью указателей.
Исходную и полученную матрицы вывести в выходной потом с необходимыми комметнариями.*/

#include <stdio.h>
#include <malloc.h>

// Характеристики строки матрицы
typedef struct Line {
int n; // кол-во элементов в строке матрицы
int* a; // указатель на первый элемент массива
} Line;

// Матрица
typedef struct Matrix {
int lines; // кол-во строк матрицы
Line* matr1; // динамический массив строк матрицы #1
Line* matr2; // динамический массив строк матрицы #2
} Matrix;


// Объявление функций
void erase(Matrix* a, Matrix* b); // очистка указателей
int getInt(int*); // функция ввода числа
int input(Matrix* a, Matrix* b); // ввод матрицы
int output(Matrix a, Matrix b); // вывод матрицы
int newMatr(Matrix* a);



//Тело программы
int main()
{

Matrix matr1 = { 0, NULL }; //исходная матрица #1
Matrix matr2 = { 0, NULL }; //исходная матрицы #2
if (input(&matr1, &matr2) == 0) { //ввод матрицы
printf("%s\n", "End of file occured");
return 1;
}
//for (int i=0;i< 3;i++)
newMatr(&matr2);
output(matr1, matr2);
erase(&matr1, &matr2); //очищение памяти
return 0;
}

//Функция ввода числа
int getInt(int* a) {
int n;
do {
printf("Enter a number:");
n = scanf_s("%d", a);
if (n == 0) {
printf("Error, re-enter the number.\n");
scanf_s("%*[^\n]");
}
} while (n == 0);
return n < 0 ? 0 : 1;
}

//Ввод матрицы
int input(Matrix* rm, Matrix* rmq)
{
const char* pr = ""; //будущее сообщение об ошибке
int m; //кол-во строк матрицы
int i, j, r = 1, b = 0;
int* p;
int* q;
int n;

printf("Entering a matrix.");

//Ввод кол-ва строк
do {
printf("%s\n", pr);
printf("Enter the number of lines ");
pr = "Error, repeat!";
if (getInt(&m) == 0)
return 0; //обнаружен конец файла (память не выделилась)
} while (m < 1);
rm->lines = m;
rmq->lines = m;


//Выделяем память под массив структур - строк матрицы(создание динамического массива указателей)
rm->matr1 = (Line*)calloc(m, sizeof(Line));
rmq->matr2 = (Line*)calloc(m, sizeof(Line));

//Ввод кол-ва элементов для каждой строки
for (i = 0; i < rm->lines; ++i) {
pr = "";
do {
printf("%s\n", pr);
printf("Enter the number of characters per line #%d. ", i + 1);
pr = "Error, repeat!";
if (getInt(&m) == 0) {
rm->lines = i; //Кол-во сформированных строк
erase(rm, rmq);
return 0; //Обнаружен конец файла
}
} while (m < 1);

rm->matr1[i].n = m;
rmq->matr2[i].n = m;

//Выделение памяти под элементы строки
p = (int*)malloc(sizeof(int) * m);
q = (int*)malloc(sizeof(int) * (m+1));
rm->matr1[i].a = p;
rmq->matr2[i].a = q;

//Ввод элементов
printf("Enter items for matrix line #%d. \n", i + 1);
for (j = 0; j < m; ++j, ++p, ++q) {
if (getInt(p) == 0) {
//Освобождение выделенной памяти
rm->lines = i + 1; //Выделена память и под текущую, i-ую строку
erase(rm, rmq);
return 0;
}
*q = *p;
}
*q = -9999999;
}
return 0;
}

int newMatr(Matrix* a)
{
int j, i;
int* q;
for (i = 0; i < a->lines; ++i, ++q) {
q = a->matr2[i].a;
//a->matr2[i].a = q;
for (j = 0; j < a->matr2[i].n; ++j) {
if (*q % 2 != 0) { //Если делится с остатком, то входим в функцию
if (*(q + 1) != -9999999) { //Если следующий эллемент не равен -9999999, то присваиваем указателю следующий адрес
*q = 1;
q++;
}
else { //иначе присваиваем ему 1
*q = 1;
}
}
else { //иначе
if (*(q + 1) != -9999999) { //Если следующий эллемент не равен -9999999, то присваиваем указателю следующий адрес
++q;
}
}
}
}
return 0;
}


//Вывод матрицы
int output(Matrix a,
